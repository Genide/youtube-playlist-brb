{"version":3,"sources":["Components/YoutubePlaylistSnippet.tsx","Utilities/Utilities.ts","Components/Config.tsx","Controller/PlaylistRetriever.ts","Controller/Beeper.ts","Components/TestPattern.tsx","Components/PlaylistPlayer.tsx","Components/BRB.tsx","Components/PageNotFound.tsx","App.tsx","serviceWorker.ts","index.tsx","Components/SMPTE_Color_Bars.svg"],"names":["YoutubePlaylistSnippet","playlist","style","snippet","display","src","thumbnails","default","url","alt","paddingLeft","title","channelTitle","textOverflow","description","RandomizeOrder","array","temporaryValue","randomIndex","currentIndex","length","shuffledArray","Math","floor","random","GetPlaylistObject","playlistId","YTApiKey","a","includeSnippet","URL","parts","searchParams","append","fetch","href","headers","request","json","items","find","id","getYTList","YTListId","Config","YoutubeApiKey","useState","currentPlaylist","setcurrentPlaylist","isDialogOpen","setisDialogOpen","queryString","setqueryString","history","useHistory","jumpToBrb","push","flexDirection","justifyContent","alignItems","height","width","initialValues","youtubeListId","loadingText","showYTControls","randomizeOrder","validate","values","errors","temp","onSubmit","setSubmitting","window","location","origin","pathname","process","search","navigator","clipboard","writeText","validateOnChange","formik","handleSubmit","borderStyle","borderWidth","padding","minWidth","margin","TextField","label","value","onChange","handleChange","onBlur","handleBlur","name","error","helperText","fullWidth","disabled","isSubmitting","FormControlLabel","control","Checkbox","checked","Button","type","variant","float","Dialog","open","onClose","DialogTitle","DialogContent","onClick","YTPlaylistRetriever","apiKey","_apiKey","this","list","token","_getPlaylistVideoPage","Error","message","nextPageToken","GetPlaylistVideos","map","video","contentDetails","videoId","filter","pageToken","response","Beeper","beepVolume","_context","_oscillator","_gain","_beepVolume","AudioContext","createOscillator","frequency","createGain","connect","destination","gain","start","duration","StartBeep","setTimeout","StopBeep","TestPattern","state","props","hidden","TestPatternImage","position","top","left","fontSize","color","transform","backgroundColor","textAlign","text","Component","defaultProps","PlaylistPlayer","currentVideoId","IsVideoPlaying","IsLoadingVideo","_beeper","_currentVideoIndex","loadCurrentPlaylistVideo","setState","newState","YTPlayerOpts","playerVars","autoplay","controls","fs","rel","modestbranding","containerClassName","opts","onPlay","onPlayerStart","onEnd","loadNextPlaylistVideo","BRB","_playlistRetriever","PlaylistRetriever","get","onMount","alert","GetPlaylistVideoIds","console","PageNotFound","REACT_APP_YT_API_KEY","App","basename","path","render","exact","to","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.567452a1.chunk.js","sourcesContent":["import React from 'react'\nimport { IPlaylist } from '../Interfaces/YTInterfaces'\n\ninterface Props {\n    playlist?: IPlaylist,\n    style?: React.CSSProperties\n}\n\nexport default function YoutubePlaylistSnippet({playlist, style}: Props) {\n    if (!playlist) return <div style={{...style}}/>;\n    if (!playlist.snippet) return <div style={{...style}}/>;\n\n    return (\n        <div style={{...style, display: \"flex\",}}>\n            <div>\n                <img src={playlist.snippet.thumbnails.default.url} alt='thumbnail'/>\n            </div>\n            <div style={{paddingLeft: '1em'}}>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>Playlist Title</th>\n                            <td>{playlist.snippet.title}</td>\n                        </tr>\n                        <tr>\n                            <th>Channel Name</th>\n                            <td>{playlist.snippet.channelTitle}</td>\n                        </tr>\n                        <tr>\n                            <th>Playlist Description</th>\n                            <td style={{textOverflow: 'initial'}}>{playlist.snippet.description}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n}\n\n","import { IPlaylist, IPlaylistListResponse } from \"../Interfaces/YTInterfaces\";\n\n/**\n * Creates a new array and randomizes the order of the elements\n * @param array Input array\n */\nexport function RandomizeOrder<T> (array: T[]): T[] {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n    let shuffledArray = [...array];\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = shuffledArray[currentIndex];\n      shuffledArray[currentIndex] = shuffledArray[randomIndex];\n      shuffledArray[randomIndex] = temporaryValue;\n    }\n  \n    return shuffledArray;\n}\n\nexport async function GetPlaylistObject(playlistId: string, YTApiKey: string, includeSnippet: boolean = false): Promise<IPlaylist | undefined> {\n  let url = new URL('https://www.googleapis.com/youtube/v3/playlists');\n  let parts = 'id'\n  if (includeSnippet) parts += ',snippet';\n  url.searchParams.append('part', parts);\n  url.searchParams.append('id', playlistId);\n  url.searchParams.append('key', YTApiKey);\n  let request = await fetch(url.href, {\n      headers: {\n          \"Accept\": \"application/json\"\n      }\n  })\n\n  let json: IPlaylistListResponse = await request.json();\n  let playlist = json.items.find(playlist => playlist.id === playlistId)\n\n  return playlist;\n}","import React, { useState } from 'react'\nimport { Formik } from 'formik';\nimport { IPlaylist } from '../Interfaces/YTInterfaces'\nimport { Button, Checkbox, FormControlLabel, TextField, Dialog, DialogTitle, DialogContent } from '@material-ui/core';\nimport YoutubePlaylistSnippet from './YoutubePlaylistSnippet';\nimport { GetPlaylistObject } from '../Utilities/Utilities';\nimport { useHistory } from 'react-router-dom';\n\ninterface Props {\n    YoutubeApiKey: string,\n}\n\nconst getYTList = async (YTListId: string, YTApiKey: string): Promise<IPlaylist | undefined> => {\n    return await GetPlaylistObject(YTListId, YTApiKey, true);\n}\n\nexport default function Config({YoutubeApiKey}: Props) {\n    const [currentPlaylist, setcurrentPlaylist] = useState({} as IPlaylist);\n    const [isDialogOpen, setisDialogOpen] = useState(false);\n    const [queryString, setqueryString] = useState('');\n\n    const history = useHistory();\n\n    let jumpToBrb = () => {\n        if (!queryString) return;\n\n        history.push(`/BRB${queryString}`)\n    }\n\n    let center: React.CSSProperties = {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%'\n    }\n\n    return (\n        <div style={{ ...center }}>\n            <div style={{width: '30%'}}></div>\n            <Formik\n                initialValues={{\n                    youtubeListId: '',\n                    loadingText: 'BE RIGHT BACK!',\n                    showYTControls: false,\n                    randomizeOrder: true\n                }}\n                validate={async values => {\n                    const errors: any = {};\n                    if (!values.youtubeListId) {\n                        errors.youtubeListId = 'Required';\n                    } else {\n                        let temp = await getYTList(values.youtubeListId, YoutubeApiKey);\n                        if (!temp) {\n                            errors.youtubeListId = 'Invalid playlist ID'\n                        } else {\n                            setcurrentPlaylist(temp);\n                        }\n                    }\n\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    let url = new URL(window.location.origin);\n                    url.pathname = `${process.env.PUBLIC_URL}/BRB`\n                    url.searchParams.append('list', values.youtubeListId);\n                    url.searchParams.append('loadingText', values.loadingText);\n                    url.searchParams.append('showYTControls', values.showYTControls ? '1' : '0');\n                    url.searchParams.append('randomizeOrder', values.randomizeOrder ? '1' : '0');\n\n                    setqueryString(url.search);\n                    navigator.clipboard.writeText(url.href);\n                    setisDialogOpen(true);\n                    setSubmitting(false);\n                }}\n                validateOnChange={false}\n            >\n                {(formik) => {\n                    return (\n                        <form onSubmit={formik.handleSubmit} style={{ borderStyle: 'groove', borderWidth: '5px', padding: '1em', width: '30%', minWidth: '450px', margin: 'auto' }}>\n                            <TextField\n                                label='Youtube Playlist ID'\n                                value={formik.values.youtubeListId}\n                                onChange={formik.handleChange}\n                                onBlur={formik.handleBlur}\n                                name='youtubeListId'\n                                error={formik.errors.youtubeListId ? true : false}\n                                helperText={formik.errors.youtubeListId ?? 'Enter a youtube playlist ID'}\n                                fullWidth\n                                disabled={formik.isSubmitting}\n                            />\n                            <br />\n                            <br />\n                            <TextField\n                                label='Loading Text'\n                                value={formik.values.loadingText}\n                                onChange={formik.handleChange}\n                                onBlur={formik.handleBlur}\n                                name='loadingText'\n                                error={formik.errors.loadingText ? true : false}\n                                helperText={formik.errors.loadingText ?? 'Displayed while loading the next video in the playlist'}\n                                fullWidth\n                                disabled={formik.isSubmitting}\n                            />\n                            <br />\n                            <br />\n                            <FormControlLabel \n                                label=\"Show Youtube Controls\"\n                                control={<Checkbox \n                                    checked={formik.values.showYTControls}\n                                    onChange={formik.handleChange}\n                                    onBlur={formik.handleBlur}\n                                    name=\"showYTControls\"\n                                    disabled={formik.isSubmitting}\n                                />}\n                            />\n                            <FormControlLabel \n                                label=\"Randomize playlist order\"\n                                control={<Checkbox \n                                    checked={formik.values.randomizeOrder}\n                                    onChange={formik.handleChange}\n                                    onBlur={formik.handleBlur}\n                                    name=\"randomizeOrder\"\n                                    disabled={formik.isSubmitting}\n                                />}\n                            />\n                            \n                            <br />\n                            <br />\n                            <Button type='submit' variant='outlined' disabled={formik.isSubmitting} style={{float: 'right'}}>\n                                Create Link\n                            </Button>\n                            <Dialog \n                                open={isDialogOpen}\n                                onClose={() => setisDialogOpen(false)}\n                            >\n                                <DialogTitle>Link has been created</DialogTitle>\n                                <DialogContent>\n                                    <div>The link has been copied to your clipboard. Click the button below to go to your new BRB page.</div>\n                                    <br/>\n                                    <Button variant='outlined' style={{float: \"right\"}} onClick={jumpToBrb}>BE RIGHT BACK</Button>\n                                </DialogContent>\n                            </Dialog>\n                        </form>\n                    )\n                }}\n            </Formik>\n            <YoutubePlaylistSnippet playlist={currentPlaylist} style={{width: '30%'}} />\n        </div>\n    )\n}\n\n","import { IPlaylistItem, IPlayListItemListResponse } from \"../Interfaces/YTInterfaces\";\n\n\nexport default class YTPlaylistRetriever {\n    private _apiKey: string;\n    /**\n     * Creates a YTPlaylistRetriever\n     * @param apiKey The youtube v3 api key\n     */\n    constructor(apiKey: string) {\n        this._apiKey = apiKey;\n    }\n\n    /**\n     * Returns a list of youtube videos\n     * @param playlistId The youtube play list id\n     */\n    public async GetPlaylistVideos(playlistId: string): Promise<IPlaylistItem[]> {\n        let list: IPlaylistItem[] = [];\n        let token = '';\n\n        do {\n            let temp = await this._getPlaylistVideoPage(playlistId, token);\n            if (temp.error) {\n                throw new Error(temp.error.message);\n            }\n            list.push(...temp.items);\n            token = temp.nextPageToken ?? \"\";\n        } while (token !== \"\")\n\n        return list;\n    }\n\n    /**\n     * Returns a list of youtube video IDs\n     * @param playlistId The youtube playlist ID\n     */\n    public async GetPlaylistVideoIds(playlistId: string): Promise<string[]> {\n        let list = await this.GetPlaylistVideos(playlistId);\n        return list.map(video => video.contentDetails?.videoId ?? \"\")\n            .filter(id => id !== '');\n    }\n\n    /**\n     * Gets a page of videos from the youtube playlist\n     * @param playlistId The youtube playlist ID\n     * @param pageToken The page token for the next video\n     */\n    private async _getPlaylistVideoPage(playlistId: string, pageToken?: string): Promise<IPlayListItemListResponse> {\n        let url = new URL(\"https://www.googleapis.com/youtube/v3/playlistItems\");\n        url.searchParams.append('part', 'contentDetails');\n        url.searchParams.append('playlistId', playlistId);\n        url.searchParams.append('key', this._apiKey);\n        url.searchParams.append('maxResults', '50');\n        if (pageToken) url.searchParams.append('pageToken', pageToken);\n        \n        let response = await fetch(url.href, {\n            headers: {\n                'Accept': 'application/json',\n            }\n        });\n        let playlist: IPlayListItemListResponse = await response.json();\n\n        return playlist;\n    }\n}","\nexport default class Beeper {\n    private _context: AudioContext\n    private _oscillator: OscillatorNode\n    private _gain: GainNode\n    private _beepVolume: number;\n\n    /**\n     * \n     * @param beepVolume A value from 0 - 1. Sets the volume of the beep. By default, this is .1.\n     */\n    constructor(beepVolume: number = .1) {\n        this._beepVolume = beepVolume;\n        this._context = new AudioContext();\n        this._oscillator = this._context.createOscillator();\n        this._oscillator.frequency.value = 1000;\n        this._gain = this._context.createGain();\n        this._oscillator.connect(this._gain);\n        this._gain.connect(this._context.destination);\n        this._gain.gain.value = 0;\n        this._oscillator.start(0);\n    }\n\n    public Beep(duration: number = 500){\n        this.StartBeep()\n        setTimeout(() => {\n            this.StopBeep();\n        }, (duration));\n    }\n\n    public StartBeep() {\n        this._gain.gain.value = this._beepVolume; // Sets the volume of the beep\n    }\n\n    public StopBeep() {\n        this._gain.gain.value = 0;\n    }\n}","import React, { Component } from 'react'\nimport TestPatternImage from './SMPTE_Color_Bars.svg'\n\ninterface Props {\n    hidden: boolean,\n    text: string,\n}\ninterface State {\n    \n}\n\nexport default class TestPattern extends Component<Props, State> {\n    static defaultProps = {\n        hidden: false,\n        text: \"\"\n    }\n    \n    state = {}\n\n    render() {\n        let containerStyle: React.CSSProperties = {\n            width: '100%',\n            height: '100%',\n        }\n\n        let overlayTextStyle: React.CSSProperties = {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            fontSize: '150px',\n            color: \"white\",\n            transform: 'translate(-50%,-50%)',\n            backgroundColor: \"black\",\n            textAlign: 'center'\n        }\n\n        return (\n            <div style={{...containerStyle, display: this.props.hidden ? \"none\": \"flex\"}}>\n                <img src={TestPatternImage} alt=\"\" style={{width: '100%'}} />\n                <div style={overlayTextStyle}>\n                    {this.props.text}\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component, Fragment } from 'react'\nimport YTPlayer, { Options } from 'react-youtube';\nimport Beeper from '../Controller/Beeper';\nimport TestPattern from './TestPattern'\n\ninterface Props {\n    playlist: string[];\n    loadingText: string;\n    showYTControls: boolean;\n}\ninterface State {\n    currentVideoId: string;\n    IsVideoPlaying: boolean;\n    IsLoadingVideo: boolean;\n}\n\nexport default class PlaylistPlayer extends Component<Props, State> {\n    static defaultProps = {\n        playlist: [],\n        loadingText: '',\n        showYTControls: false\n    }\n    state: State = {\n        currentVideoId: '',\n        IsVideoPlaying: false,\n        IsLoadingVideo: true\n    }\n    private _beeper: Beeper;\n    private _currentVideoIndex: number;\n\n    constructor(props: Props) {\n        super(props);\n        this._beeper = new Beeper(.1);\n        this._currentVideoIndex = 0;\n    }\n\n    componentDidMount() {\n        this.loadCurrentPlaylistVideo();\n    }\n\n    onPlayerStart() {\n        this.setState({\n            IsVideoPlaying: true,\n            IsLoadingVideo: false\n        });\n        this._beeper.StopBeep();\n    }\n\n    loadNextPlaylistVideo() {\n        this._currentVideoIndex++;\n        this.loadCurrentPlaylistVideo();\n    }\n\n    loadCurrentPlaylistVideo() {\n        let newState = {\n            IsVideoPlaying: false,\n            IsLoadingVideo: false,\n            currentVideoId: ''\n        }\n        if (this._currentVideoIndex < this.props.playlist.length) {\n            newState.currentVideoId = this.props.playlist[this._currentVideoIndex];\n            newState.IsLoadingVideo = true;\n            this._beeper.StartBeep();\n        }\n\n        this.setState(newState);\n    }\n\n    render() {\n        if (this.props.playlist.length === 0) return <Fragment />\n\n        const YTPlayerOpts: Options = {\n            height: '100%',\n            width: '100%',\n            playerVars: {\n                autoplay: 1,\n                controls: this.props.showYTControls ? 1 : 0, // Hide the player controls\n                fs: 0, // Hide the fullscreen button\n                rel: 0, // Disable showing related videos after a video is finished playing\n                modestbranding: 1\n            }\n        }\n\n        return (\n            <div style={{height: 'inherit'}}>\n                <div hidden={!this.state.IsVideoPlaying} style={{height: 'inherit'}}>\n                    <YTPlayer\n                        containerClassName='YTPlayerContainer'\n                        videoId={this.state.currentVideoId}\n                        opts={YTPlayerOpts}\n                        onPlay={() => this.onPlayerStart()}\n                        onEnd={() => this.loadNextPlaylistVideo()}\n                    />\n                </div>\n                <TestPattern hidden={!this.state.IsLoadingVideo} text={this.props.loadingText}/>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { GetPlaylistObject, RandomizeOrder } from '../Utilities/Utilities';\nimport PlaylistRetriever from '../Controller/PlaylistRetriever';\nimport PlaylistPlayer from './PlaylistPlayer';\n\ninterface Props extends RouteComponentProps {\n    YoutubeApiKey: string;\n}\ninterface State {\n    playlistId: string;\n    playlist: string[];\n    loadingText: string;\n    showYTControls: boolean;\n    randomizeOrder: boolean;\n}\n\nexport default class BRB extends Component<Props, State> {\n    state: State = {\n        playlistId: '',\n        playlist: [],\n        loadingText: '',\n        showYTControls: false,\n        randomizeOrder: true\n    }\n    private _playlistRetriever: PlaylistRetriever;\n\n    constructor(props: Props) {\n        super(props);\n\n        this._playlistRetriever = new PlaylistRetriever(props.YoutubeApiKey);\n\n        // Check the query paths        \n        let url = new URL(window.location.href);\n        this.state.playlistId = url.searchParams.get('list') ?? '';\n        this.state.loadingText = url.searchParams.get('loadingText') ?? '';\n        this.state.showYTControls = url.searchParams.get('showYTControls') === '1' ? true : false;\n        this.state.randomizeOrder = url.searchParams.get('randomizeOrder') === '1' ? true : false; \n    }\n\n    componentDidMount() {\n        this.onMount();\n    }\n\n    async onMount() {\n        // Get the playlist\n        if (!this.state.playlistId) {\n            alert('Missing playlist ID. \\nRedirecting to configuration page.');\n            this.props.history.push('/config');\n            return;\n        }\n        \n        let playlist = await GetPlaylistObject(this.state.playlistId, this.props.YoutubeApiKey);\n        if (!playlist) {\n            alert(`Invalid youtube playlist ID of ${this.state.playlistId}\\nRedirecting to configuration page.`)\n            this.props.history.push('/config');\n            return;\n        }\n\n        try {\n            let temp = await this._playlistRetriever.GetPlaylistVideoIds(this.state.playlistId);\n            if (this.state.randomizeOrder) temp = RandomizeOrder(temp);\n            this.setState({playlist: temp});\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    render() {\n        return (\n            (this.state.playlist.length > 0)\n                ? <PlaylistPlayer\n                    playlist={this.state.playlist}\n                    loadingText={this.state.loadingText}\n                    showYTControls={this.state.showYTControls} />\n                : ''\n            \n        )\n    }\n}\n","import React, { ReactElement } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Button } from '@material-ui/core';\n\ninterface Props {\n    \n}\n\n// eslint-disable-next-line no-empty-pattern\nexport default function PageNotFound({}: Props): ReactElement {\n    const history = useHistory();\n\n    let onClick = () => {\n        history.push('/config');\n    }\n\n    let center: React.CSSProperties = {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%'\n    }\n\n    return (\n        <div style={center}>\n            <h2 style={{textAlign: 'center'}}>\n                Page not found. Click the button to go to the configuration page.\n            </h2>\n            <div>\n                <Button onClick={onClick} variant='outlined'>Go to Configuration Page</Button>\n            </div>\n        </div>\n    )\n}\n","import React, { ReactElement } from 'react'\nimport './App.css';\nimport Config from './Components/Config';\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport BRB from './Components/BRB';\nimport PageNotFound from './Components/PageNotFound';\n\nconst REACT_APP_YT_API_KEY = process.env.REACT_APP_YT_API_KEY ?? '';\n\n\ninterface Props {\n}\n\n// eslint-disable-next-line no-empty-pattern\nexport default function App({ }: Props): ReactElement {\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Switch>\n                <Route path='/brb' render={(props) => (<BRB YoutubeApiKey={REACT_APP_YT_API_KEY} {...props}/>)} />\n                <Route path='/config'>\n                    <Config YoutubeApiKey={REACT_APP_YT_API_KEY} />\n                </Route>\n                <Route path='/' exact>\n                    <Redirect to='/config' />\n                </Route>\n                <Route>\n                    <PageNotFound />\n                </Route>\n            </Switch>\n        </BrowserRouter>\n    )\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/SMPTE_Color_Bars.bba5813e.svg\";"],"sourceRoot":""}