{"version":3,"sources":["Components/YoutubePlaylistSnippet.tsx","Utilities/Utilities.ts","Components/JumpToBRBDialog.tsx","Components/FormikTextField.tsx","Components/FormikCheckbox.tsx","Components/Config.tsx","Controller/PlaylistRetriever.ts","Controller/Beeper.ts","Components/TestPattern.tsx","Components/PlaylistPlayer.tsx","Components/BRB.tsx","Components/PageNotFound.tsx","App.tsx","serviceWorker.ts","index.tsx","Components/SMPTE_Color_Bars.svg"],"names":["YoutubePlaylistSnippet","playlist","style","theme","useTheme","snippet","Paper","display","color","palette","text","primary","elevation","Box","src","thumbnails","default","url","alt","paddingLeft","title","channelTitle","textOverflow","description","RandomizeOrder","array","temporaryValue","randomIndex","currentIndex","length","shuffledArray","Math","floor","random","GetPlaylistObject","playlistId","YTApiKey","a","includeSnippet","URL","parts","searchParams","append","fetch","href","headers","request","json","items","find","id","ValidateImageLink","imageLink","response","status","blob","includes","type","console","error","JumpToBRBDialog","onJumpToBrb","open","onClose","Dialog","DialogTitle","DialogContent","Button","variant","float","onClick","startIcon","defaultProps","FormikTextField","props","useField","field","meta","textFieldProps","helperText","TextField","FormikCheckbox","FormControlLabel","FormControlLabelProps","control","Checkbox","CheckboxProps","getYTList","YTListId","Config","YoutubeApiKey","useState","currentPlaylist","setcurrentPlaylist","isDialogOpen","setisDialogOpen","queryString","setqueryString","setImageLink","history","useHistory","center","flexDirection","justifyContent","alignItems","height","backgroundColor","background","paddingRight","checkboxFormStyle","paper","validateYTPlaylistID","playlistID","temp","validateImageLink","errorMessage","width","maxWidth","maxHeight","margin","push","initialValues","youtubeListId","loadingText","showYTControls","randomizeOrder","onSubmit","values","setSubmitting","window","location","origin","pathname","process","search","navigator","clipboard","writeText","validateOnChange","formik","padding","minWidth","name","validate","label","disabled","isSubmitting","StyledFormikTextField","otherProps","fullWidth","YTPlaylistRetriever","apiKey","_apiKey","this","list","token","_getPlaylistVideoPage","Error","message","nextPageToken","GetPlaylistVideos","map","video","contentDetails","videoId","filter","pageToken","Beeper","beepVolume","_context","_oscillator","_gain","_beepVolume","AudioContext","createOscillator","frequency","value","createGain","connect","destination","gain","start","duration","StartBeep","setTimeout","StopBeep","TestPattern","state","brbImageLink","TestPatternImage","imageStyle","hidden","position","top","left","fontSize","transform","textAlign","Component","PlaylistPlayer","currentVideoId","IsVideoPlaying","IsLoadingVideo","_beeper","_currentVideoIndex","loadCurrentPlaylistVideo","setState","newState","YTPlayerOpts","playerVars","autoplay","controls","fs","rel","modestbranding","containerClassName","opts","onPlay","onPlayerStart","onEnd","loadNextPlaylistVideo","BRB","_playlistRetriever","PlaylistRetriever","get","onMount","alert","brbImageErrorMessage","GetPlaylistVideoIds","PageNotFound","REACT_APP_YT_API_KEY","App","darkTheme","createMuiTheme","ThemeProvider","basename","path","render","exact","to","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.b7956b7c.chunk.js","sourcesContent":["import { Box, Paper, useTheme } from '@material-ui/core';\nimport React from 'react'\nimport { IPlaylist } from '../Interfaces/YTInterfaces'\n\n\ninterface Props {\n    playlist?: IPlaylist,\n    style?: React.CSSProperties\n}\n\nexport default function YoutubePlaylistSnippet({playlist, style}: Props) {\n    const theme = useTheme();\n    if (!playlist) return <div style={{...style}}/>;\n    if (!playlist.snippet) return <div style={{...style}}/>;\n\n    return (\n        <Paper \n            style={{...style, display: \"flex\", color: theme.palette.text.primary}}\n            elevation={3}\n        >\n            <Box>\n                <img src={playlist.snippet.thumbnails.default.url} alt='thumbnail'/>\n            </Box>\n            <Box style={{paddingLeft: '1em'}}>\n                <table>\n                    <tbody>\n                        <tr>\n                            <th>Playlist Title</th>\n                            <td>{playlist.snippet.title}</td>\n                        </tr>\n                        <tr>\n                            <th>Channel Name</th>\n                            <td>{playlist.snippet.channelTitle}</td>\n                        </tr>\n                        <tr>\n                            <th>Playlist Description</th>\n                            <td style={{textOverflow: 'initial'}}>{playlist.snippet.description}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </Box>\n        </Paper>\n    );\n}\n\n","import { IPlaylist, IPlaylistListResponse } from \"../Interfaces/YTInterfaces\";\n\n/**\n * Creates a new array and randomizes the order of the elements\n * @param array Input array\n */\nexport function RandomizeOrder<T> (array: T[]): T[] {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n    let shuffledArray = [...array];\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = shuffledArray[currentIndex];\n      shuffledArray[currentIndex] = shuffledArray[randomIndex];\n      shuffledArray[randomIndex] = temporaryValue;\n    }\n  \n    return shuffledArray;\n}\n\nexport async function GetPlaylistObject(playlistId: string, YTApiKey: string, includeSnippet: boolean = false): Promise<IPlaylist | undefined> {\n  let url = new URL('https://www.googleapis.com/youtube/v3/playlists');\n  let parts = 'id'\n  if (includeSnippet) parts += ',snippet';\n  url.searchParams.append('part', parts);\n  url.searchParams.append('id', playlistId);\n  url.searchParams.append('key', YTApiKey);\n  let request = await fetch(url.href, {\n      headers: {\n          \"Accept\": \"application/json\"\n      }\n  })\n\n  let json: IPlaylistListResponse = await request.json();\n  let playlist = json.items.find(playlist => playlist.id === playlistId)\n\n  return playlist;\n}\n\nexport async function ValidateImageLink(imageLink: string): Promise<string> {\n  if (!imageLink) {\n    return 'Missing image link';\n  }\n\n  try {\n    let response = await fetch(imageLink);\n    if (response.status !== 200) {\n      return 'Unable to load image';\n    }\n\n    let blob = await response.blob()\n    let allowedBlobTypes = ['image/png', 'image/jpeg', 'image/gif'];\n    if (!allowedBlobTypes.includes(blob.type)) {\n      console.error(blob);\n      return 'This is not a link for an image';\n    }\n\n    return '';\n  } catch (error) {\n    return 'Unable to load image';\n  }\n}","import { Box, Button, Dialog, DialogContent, DialogTitle, ModalProps } from '@material-ui/core'\nimport CallMade from '@material-ui/icons/CallMade';\nimport React, { ReactElement } from 'react'\n\ninterface Props {\n    onJumpToBrb: IOnJumpToBrb,\n    style: React.CSSProperties,\n    open: boolean,\n    onClose?: ModalProps['onClose']\n}\n\ninterface IOnJumpToBrb {\n    (): void\n}\n\nJumpToBRBDialog.defaultProps = {\n    open: false,\n    onJumpToBrb: () => {}\n}\n\nexport default function JumpToBRBDialog({onJumpToBrb, style, open, onClose}: Props): ReactElement {\n    return (\n        <Box style={{...style}}>\n            <Dialog\n                open={open}\n                onClose={onClose}\n            >\n                <DialogTitle>Link has been created</DialogTitle>\n                <DialogContent>\n                    <Box>The link has been copied to your clipboard. Click the button below to go to your new BRB page.</Box>\n                    <br />\n                    <Button \n                        variant='outlined' \n                        style={{ float: \"right\" }} \n                        onClick={onJumpToBrb}\n                        startIcon={<CallMade />}\n                    >\n                        JUMP TO BRB\n                    </Button>\n                </DialogContent>\n            </Dialog>\n        </Box>\n    )\n}\n","import React, { ReactElement } from 'react'\nimport { useField, FieldHookConfig } from 'formik';\nimport { TextField, TextFieldProps } from '@material-ui/core';\n\nexport type FormikTextFieldProps = FieldHookConfig<string> & {\n    textFieldProps: TextFieldProps    \n}\n\nexport default function FormikTextField(props: FormikTextFieldProps): ReactElement {\n    const [field, meta]  = useField(props)\n\n    let textFieldProps: TextFieldProps = {...props.textFieldProps};\n    textFieldProps.error = meta.error ? true : false;\n    textFieldProps.helperText = meta.error ?? textFieldProps.helperText;\n\n    return (\n        <TextField\n            {...field}\n            {...textFieldProps}\n        />\n    )\n}\n","import { Checkbox, CheckboxProps, FormControlLabel } from '@material-ui/core'\nimport { FieldHookConfig, useField } from 'formik'\nimport React, { ReactElement, ReactNode } from 'react'\n\ntype FormikCheckboxProps = FieldHookConfig<boolean> & {\n    FormControlLabelProps: FCLProps,\n    CheckboxProps?: CheckboxProps\n}\n\nexport interface FCLProps {\n    label: ReactNode;\n    labelPlacement? : 'end' | 'start' | 'top' | 'bottom';\n    style?: React.CSSProperties;\n}\n\nexport default function FormikCheckbox(props: FormikCheckboxProps): ReactElement {\n    const [field]  = useField(props);\n\n    return (\n        <FormControlLabel\n            {...props.FormControlLabelProps}\n            control={<Checkbox \n                {...field}\n                {...props.CheckboxProps}\n            />}\n        />\n    )\n}\n","import React, { useState } from 'react'\nimport { Form, Formik } from 'formik';\nimport { IPlaylist } from '../Interfaces/YTInterfaces'\nimport { Button, Box, useTheme, Paper } from '@material-ui/core';\nimport YoutubePlaylistSnippet from './YoutubePlaylistSnippet';\nimport { GetPlaylistObject, ValidateImageLink } from '../Utilities/Utilities';\nimport { useHistory } from 'react-router-dom';\nimport CreateIcon from '@material-ui/icons/Create';\nimport JumpToBRBDialog from './JumpToBRBDialog';\nimport FormikTextField, { FormikTextFieldProps } from './FormikTextField';\nimport FormikCheckbox from './FormikCheckbox';\n\ninterface Props {\n    YoutubeApiKey: string,\n}\n\nconst getYTList = async (YTListId: string, YTApiKey: string): Promise<IPlaylist | undefined> => {\n    return await GetPlaylistObject(YTListId, YTApiKey, true);\n}\n\nexport default function Config({YoutubeApiKey}: Props) {\n    const [currentPlaylist, setcurrentPlaylist] = useState({} as IPlaylist);\n    const [isDialogOpen, setisDialogOpen] = useState(false);\n    const [queryString, setqueryString] = useState('');\n    const [imageLink, setImageLink] = useState('');\n    const theme = useTheme();\n    const history = useHistory();\n\n    let jumpToBrb = () => {\n        if (!queryString) return;\n\n        history.push(`/BRB${queryString}`)\n    }\n\n    let center: React.CSSProperties = {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%',\n        backgroundColor: theme.palette.background.default,\n        paddingLeft: '2em',\n        paddingRight: '2em'\n    }\n\n    let checkboxFormStyle: React.CSSProperties = {\n        backgroundColor: theme.palette.background.paper, \n        color: theme.palette.text.primary\n    }\n\n    let validateYTPlaylistID = async (playlistID: string): Promise<string> => {\n        if (!playlistID) {\n            setcurrentPlaylist({} as IPlaylist);\n            return 'Required';\n        } else {\n            let temp = await getYTList(playlistID, YoutubeApiKey);\n            if (!temp) {\n                setcurrentPlaylist({} as IPlaylist);\n                return 'Invalid playlist ID';\n            }\n\n            setcurrentPlaylist(temp);\n        }\n        return '';\n    }\n\n    let validateImageLink = async (imageLink: string): Promise<string> => {\n        if (!imageLink) {\n            setImageLink('');\n            return '';\n        }\n\n        let errorMessage = await ValidateImageLink(imageLink);\n        if (errorMessage) {\n            setImageLink('');\n            return errorMessage;\n        }\n\n        setImageLink(imageLink);\n        return '';\n    }\n\n    return (\n        <Box style={{...center}} >\n            <Box style={{width: '30%'}}>\n                <img src={imageLink} alt='' style={{maxWidth: '100%', maxHeight: '100%', margin: 'auto', width:'auto', height:'auto'}} />\n                <JumpToBRBDialog \n                    style={{width: '30%'}} \n                    onJumpToBrb={jumpToBrb}\n                    open={isDialogOpen}\n                    onClose={() => setisDialogOpen(false)}\n                />\n            </Box>\n            <Formik\n                initialValues={{\n                    youtubeListId: '',\n                    loadingText: '',\n                    showYTControls: false,\n                    randomizeOrder: false,\n                    imageLink: ''\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    let url = new URL(window.location.origin);\n                    url.pathname = `${process.env.PUBLIC_URL}/BRB`\n                    url.searchParams.append('list', values.youtubeListId);\n                    url.searchParams.append('loadingText', values.loadingText);\n                    url.searchParams.append('showYTControls', values.showYTControls ? '1' : '0');\n                    url.searchParams.append('randomizeOrder', values.randomizeOrder ? '1' : '0');\n                    url.searchParams.append('brbImage', values.imageLink);\n\n                    setqueryString(url.search);\n                    navigator.clipboard.writeText(url.href);\n                    setisDialogOpen(true);\n                    setSubmitting(false);\n                }}\n                validateOnChange={false}\n            >\n                {(formik) => {\n                    return (\n                        <Paper \n                            elevation={3}\n                            style={{ padding: '1em', width: '30%', minWidth: '450px', margin: 'auto'}}\n                        >\n                        <Form>\n                            <StyledFormikTextField\n                                name='youtubeListId'\n                                validate={validateYTPlaylistID}\n                                textFieldProps={{\n                                    label: 'Youtube Playlist ID',\n                                    helperText: 'Enter a youtube playlist ID',\n                                    disabled: formik.isSubmitting\n                                }}\n                            />\n                            <StyledFormikTextField \n                                name='loadingText'\n                                textFieldProps={{\n                                    label: 'Loading Text',\n                                    helperText: 'The text to display while loading the next video in the playlist',\n                                    disabled: formik.isSubmitting\n                                }}\n                            />\n                            <StyledFormikTextField \n                                name='imageLink'\n                                validate={validateImageLink}\n                                textFieldProps={{\n                                    label: 'BRB Image Link',\n                                    helperText: 'The image to display while loading the next video in the playlist',\n                                    disabled: formik.isSubmitting\n                                }}\n                            />\n                            <FormikCheckbox\n                                name=\"showYTControls\"\n                                FormControlLabelProps={{label:'Show Youtube controls', style:{...checkboxFormStyle}}}\n                                CheckboxProps={{disabled:formik.isSubmitting, color:'primary'}}\n                            />\n                            <br />\n                            <FormikCheckbox\n                                name='randomizeOrder'\n                                FormControlLabelProps={{label:'Randomize playlist order', style:{...checkboxFormStyle}}}\n                                CheckboxProps={{disabled:formik.isSubmitting, color:'primary'}}\n                            />\n                            \n                            <br />\n                            <br />\n                            <Button \n                                type='submit' \n                                variant='outlined' \n                                disabled={formik.isSubmitting} \n                                style={{float: 'right'}}\n                                startIcon={<CreateIcon />}\n                            >\n                                Create Link\n                            </Button>\n                        </Form>\n                        </Paper>\n                    )\n                }}\n            </Formik>\n            <YoutubePlaylistSnippet playlist={currentPlaylist} style={{width: '30%', padding: '1em'}} />\n        </Box>\n    )\n}\n\nlet StyledFormikTextField = ({textFieldProps, ...otherProps}: FormikTextFieldProps) => {\n    textFieldProps.variant = textFieldProps.variant ?? 'outlined' as any;\n    textFieldProps.fullWidth = textFieldProps.fullWidth ?? true;\n    textFieldProps.margin = textFieldProps.margin ?? 'normal';\n\n    return (\n        <FormikTextField \n            // https://github.com/mui-org/material-ui/issues/15697\n            // I'm doing this funny business here because of a typescript bug\n            textFieldProps={textFieldProps}\n            {...otherProps}\n        />\n    );\n}","import { IPlaylistItem, IPlayListItemListResponse } from \"../Interfaces/YTInterfaces\";\n\n\nexport default class YTPlaylistRetriever {\n    private _apiKey: string;\n    /**\n     * Creates a YTPlaylistRetriever\n     * @param apiKey The youtube v3 api key\n     */\n    constructor(apiKey: string) {\n        this._apiKey = apiKey;\n    }\n\n    /**\n     * Returns a list of youtube videos\n     * @param playlistId The youtube play list id\n     */\n    public async GetPlaylistVideos(playlistId: string): Promise<IPlaylistItem[]> {\n        let list: IPlaylistItem[] = [];\n        let token = '';\n\n        do {\n            let temp = await this._getPlaylistVideoPage(playlistId, token);\n            if (temp.error) {\n                throw new Error(temp.error.message);\n            }\n            list.push(...temp.items);\n            token = temp.nextPageToken ?? \"\";\n        } while (token !== \"\")\n\n        return list;\n    }\n\n    /**\n     * Returns a list of youtube video IDs\n     * @param playlistId The youtube playlist ID\n     */\n    public async GetPlaylistVideoIds(playlistId: string): Promise<string[]> {\n        let list = await this.GetPlaylistVideos(playlistId);\n        return list.map(video => video.contentDetails?.videoId ?? \"\")\n            .filter(id => id !== '');\n    }\n\n    /**\n     * Gets a page of videos from the youtube playlist\n     * @param playlistId The youtube playlist ID\n     * @param pageToken The page token for the next video\n     */\n    private async _getPlaylistVideoPage(playlistId: string, pageToken?: string): Promise<IPlayListItemListResponse> {\n        let url = new URL(\"https://www.googleapis.com/youtube/v3/playlistItems\");\n        url.searchParams.append('part', 'contentDetails');\n        url.searchParams.append('playlistId', playlistId);\n        url.searchParams.append('key', this._apiKey);\n        url.searchParams.append('maxResults', '50');\n        if (pageToken) url.searchParams.append('pageToken', pageToken);\n        \n        let response = await fetch(url.href, {\n            headers: {\n                'Accept': 'application/json',\n            }\n        });\n        let playlist: IPlayListItemListResponse = await response.json();\n\n        return playlist;\n    }\n}","\nexport default class Beeper {\n    private _context: AudioContext\n    private _oscillator: OscillatorNode\n    private _gain: GainNode\n    private _beepVolume: number;\n\n    /**\n     * \n     * @param beepVolume A value from 0 - 1. Sets the volume of the beep. By default, this is .1.\n     */\n    constructor(beepVolume: number = .1) {\n        this._beepVolume = beepVolume;\n        this._context = new AudioContext();\n        this._oscillator = this._context.createOscillator();\n        this._oscillator.frequency.value = 1000;\n        this._gain = this._context.createGain();\n        this._oscillator.connect(this._gain);\n        this._gain.connect(this._context.destination);\n        this._gain.gain.value = 0;\n        this._oscillator.start(0);\n    }\n\n    public Beep(duration: number = 500){\n        this.StartBeep()\n        setTimeout(() => {\n            this.StopBeep();\n        }, (duration));\n    }\n\n    public StartBeep() {\n        this._gain.gain.value = this._beepVolume; // Sets the volume of the beep\n    }\n\n    public StopBeep() {\n        this._gain.gain.value = 0;\n    }\n}","import React, { Component } from 'react'\nimport TestPatternImage from './SMPTE_Color_Bars.svg'\n\ninterface Props {\n    hidden: boolean,\n    text: string,\n    brbImageLink: string\n}\ninterface State {\n    \n}\n\nexport default class TestPattern extends Component<Props, State> {\n    static defaultProps = {\n        hidden: false,\n        text: '',\n        brbImageLink: ''\n    }\n    \n    state = {}\n\n    render() {\n        let containerStyle: React.CSSProperties = {\n            width: '100%',\n            height: '100%',\n        }\n\n        let overlayTextStyle: React.CSSProperties = {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            fontSize: '150px',\n            color: \"white\",\n            transform: 'translate(-50%,-50%)',\n            backgroundColor: \"black\",\n            textAlign: 'center'\n        }\n\n        let brbImageLink = (this.props.brbImageLink) ? this.props.brbImageLink : TestPatternImage;\n        let imageStyle: React.CSSProperties = (this.props.brbImageLink) \n                            ? {maxWidth: '100%', maxHeight: '100%', margin: 'auto', width:'auto', height:'auto'}\n                            : {width: '100%'}\n\n        return (\n            <div style={{...containerStyle, display: this.props.hidden ? \"none\": \"flex\"}}>\n                <img src={brbImageLink} alt=\"\" style={imageStyle} />\n                <div style={overlayTextStyle}>\n                    {this.props.text}\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component, Fragment } from 'react'\nimport YTPlayer, { Options } from 'react-youtube';\nimport Beeper from '../Controller/Beeper';\nimport TestPattern from './TestPattern'\n\ninterface Props {\n    playlist: string[];\n    loadingText: string;\n    showYTControls: boolean;\n    brbImageLink: string;\n}\ninterface State {\n    currentVideoId: string;\n    IsVideoPlaying: boolean;\n    IsLoadingVideo: boolean;\n}\n\nexport default class PlaylistPlayer extends Component<Props, State> {\n    static defaultProps = {\n        playlist: [],\n        loadingText: '',\n        showYTControls: false,\n        brbImageLink: ''\n    }\n    state: State = {\n        currentVideoId: '',\n        IsVideoPlaying: false,\n        IsLoadingVideo: true\n    }\n    private _beeper: Beeper;\n    private _currentVideoIndex: number;\n\n    constructor(props: Props) {\n        super(props);\n        this._beeper = new Beeper(.1);\n        this._currentVideoIndex = 0;\n    }\n\n    componentDidMount() {\n        this.loadCurrentPlaylistVideo();\n    }\n\n    onPlayerStart() {\n        this.setState({\n            IsVideoPlaying: true,\n            IsLoadingVideo: false\n        });\n        this._beeper.StopBeep();\n    }\n\n    loadNextPlaylistVideo() {\n        this._currentVideoIndex++;\n        this.loadCurrentPlaylistVideo();\n    }\n\n    loadCurrentPlaylistVideo() {\n        let newState = {\n            IsVideoPlaying: false,\n            IsLoadingVideo: false,\n            currentVideoId: ''\n        }\n        if (this._currentVideoIndex < this.props.playlist.length) {\n            newState.currentVideoId = this.props.playlist[this._currentVideoIndex];\n            newState.IsLoadingVideo = true;\n            this._beeper.StartBeep();\n        }\n\n        this.setState(newState);\n    }\n\n    render() {\n        if (this.props.playlist.length === 0) return <Fragment />\n\n        const YTPlayerOpts: Options = {\n            height: '100%',\n            width: '100%',\n            playerVars: {\n                autoplay: 1,\n                controls: this.props.showYTControls ? 1 : 0, // Hide the player controls\n                fs: 0, // Hide the fullscreen button\n                rel: 0, // Disable showing related videos after a video is finished playing\n                modestbranding: 1\n            }\n        }\n\n        return (\n            <div style={{height: 'inherit'}}>\n                <div hidden={!this.state.IsVideoPlaying} style={{height: 'inherit'}}>\n                    <YTPlayer\n                        containerClassName='YTPlayerContainer'\n                        videoId={this.state.currentVideoId}\n                        opts={YTPlayerOpts}\n                        onPlay={() => this.onPlayerStart()}\n                        onEnd={() => this.loadNextPlaylistVideo()}\n                    />\n                </div>\n                <TestPattern \n                    hidden={!this.state.IsLoadingVideo} \n                    text={this.props.loadingText}\n                    brbImageLink={this.props.brbImageLink}/>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { GetPlaylistObject, RandomizeOrder, ValidateImageLink } from '../Utilities/Utilities';\nimport PlaylistRetriever from '../Controller/PlaylistRetriever';\nimport PlaylistPlayer from './PlaylistPlayer';\n\ninterface Props extends RouteComponentProps {\n    YoutubeApiKey: string;\n}\ninterface State {\n    playlistId: string;\n    playlist: string[];\n    loadingText: string;\n    showYTControls: boolean;\n    randomizeOrder: boolean;\n    brbImageLink: string;\n}\n\nexport default class BRB extends Component<Props, State> {\n    state: State = {\n        playlistId: '',\n        playlist: [],\n        loadingText: '',\n        showYTControls: false,\n        randomizeOrder: true,\n        brbImageLink: ''\n    }\n    private _playlistRetriever: PlaylistRetriever;\n\n    constructor(props: Props) {\n        super(props);\n\n        this._playlistRetriever = new PlaylistRetriever(props.YoutubeApiKey);\n\n        // Check the query paths        \n        let url = new URL(window.location.href);\n        this.state.playlistId = url.searchParams.get('list') ?? '';\n        this.state.loadingText = url.searchParams.get('loadingText') ?? '';\n        this.state.showYTControls = url.searchParams.get('showYTControls') === '1' ? true : false;\n        this.state.randomizeOrder = url.searchParams.get('randomizeOrder') === '1' ? true : false;\n        this.state.brbImageLink = url.searchParams.get('brbImage') ?? '';\n    }\n\n    componentDidMount() {\n        this.onMount();\n    }\n\n    async onMount() {\n        // Get the playlist\n        if (!this.state.playlistId) {\n            alert('Missing playlist ID. \\nRedirecting to configuration page.');\n            this.props.history.push('/config');\n            return;\n        }\n        \n        let playlist = await GetPlaylistObject(this.state.playlistId, this.props.YoutubeApiKey);\n        if (!playlist) {\n            alert(`Invalid youtube playlist ID of ${this.state.playlistId}\\nRedirecting to configuration page.`);\n            this.props.history.push('/config');\n            return;\n        }\n\n        let brbImageErrorMessage = '';\n        if (this.state.brbImageLink) {\n            brbImageErrorMessage = await ValidateImageLink(this.state.brbImageLink);\n        }\n        if (brbImageErrorMessage) {\n            alert(`Invalid BRB image of ${this.state.brbImageLink}\\n${brbImageErrorMessage}\\nRedirecting to configuration page.`);\n            this.props.history.push('/config');\n            return;\n        }\n\n        try {\n            let temp = await this._playlistRetriever.GetPlaylistVideoIds(this.state.playlistId);\n            if (this.state.randomizeOrder) temp = RandomizeOrder(temp);\n            this.setState({playlist: temp});\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    render() {\n        return (\n            (this.state.playlist.length > 0)\n                ? <PlaylistPlayer\n                    playlist={this.state.playlist}\n                    loadingText={this.state.loadingText}\n                    showYTControls={this.state.showYTControls}\n                    brbImageLink={this.state.brbImageLink} />\n                : ''\n            \n        )\n    }\n}\n","import React, { ReactElement } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Button } from '@material-ui/core';\n\ninterface Props {\n    \n}\n\n// eslint-disable-next-line no-empty-pattern\nexport default function PageNotFound({}: Props): ReactElement {\n    const history = useHistory();\n\n    let onClick = () => {\n        history.push('/config');\n    }\n\n    let center: React.CSSProperties = {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%'\n    }\n\n    return (\n        <div style={center}>\n            <h2 style={{textAlign: 'center'}}>\n                Page not found. Click the button to go to the configuration page.\n            </h2>\n            <div>\n                <Button onClick={onClick} variant='outlined'>Go to Configuration Page</Button>\n            </div>\n        </div>\n    )\n}\n","import React, { ReactElement } from 'react'\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport './App.css';\nimport Config from './Components/Config';\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport BRB from './Components/BRB';\nimport PageNotFound from './Components/PageNotFound';\n\nconst REACT_APP_YT_API_KEY = process.env.REACT_APP_YT_API_KEY ?? '';\n\n\ninterface Props {\n}\n\n// eslint-disable-next-line no-empty-pattern\nexport default function App({ }: Props): ReactElement {\n    const darkTheme = createMuiTheme({\n        palette: {\n            type: 'dark'\n        }\n    });\n\n    return (\n        <ThemeProvider theme={darkTheme}>\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <Switch>\n                    <Route path='/brb' render={(props) => (<BRB YoutubeApiKey={REACT_APP_YT_API_KEY} {...props}/>)} />\n                    <Route path='/config'>\n                        <Config YoutubeApiKey={REACT_APP_YT_API_KEY} />\n                    </Route>\n                    <Route path='/' exact>\n                        <Redirect to='/config' />\n                    </Route>\n                    <Route>\n                        <PageNotFound />\n                    </Route>\n                </Switch>\n            </BrowserRouter>\n        </ThemeProvider>\n    )\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/SMPTE_Color_Bars.bba5813e.svg\";"],"sourceRoot":""}