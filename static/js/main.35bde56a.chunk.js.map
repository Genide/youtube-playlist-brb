{"version":3,"sources":["Components/SMPTE_Color_Bars.svg","Controller/PlaylistRetriever.ts","Utilities/Utilities.ts","Components/YoutubePlaylistSnippet.tsx","Components/ConfigForm.tsx","Controller/Beeper.ts","Components/TestPattern.tsx","Components/PlaylistPlayer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","YTPlaylistRetriever","apiKey","_apiKey","this","playlistId","list","token","_getPlaylistVideoPage","temp","error","Error","message","push","items","nextPageToken","GetPlaylistVideos","map","video","contentDetails","videoId","filter","id","pageToken","url","URL","searchParams","append","fetch","href","headers","response","json","playlist","RandomizeOrder","array","temporaryValue","randomIndex","currentIndex","length","shuffledArray","Math","floor","random","GetPlaylistObject","YTApiKey","a","includeSnippet","parts","request","find","YoutubePlaylistSnippet","state","props","snippet","style","display","flexGrow","padding","src","thumbnails","default","alt","paddingLeft","title","channelTitle","description","Component","ConfigForm","YTListId","YoutubeApiKey","initialValues","youtubeListId","loadingText","showYTControls","randomizeOrder","validate","values","errors","getYTList","setState","currentPlaylist","onSubmit","setSubmitting","validateOnChange","formik","handleSubmit","borderStyle","borderWidth","width","minWidth","TextField","label","value","onChange","handleChange","onBlur","handleBlur","name","helperText","fullWidth","disabled","isSubmitting","FormControlLabel","control","Checkbox","checked","Button","type","variant","defaultProps","Beeper","beepVolume","_context","_oscillator","_gain","_beepVolume","AudioContext","createOscillator","frequency","createGain","connect","destination","gain","start","duration","StartBeep","setTimeout","StopBeep","TestPattern","height","hidden","TestPatternImage","position","top","left","fontSize","color","transform","backgroundColor","textAlign","text","PlaylistPlayer","currentVideoId","IsVideoPlaying","IsLoadingVideo","_beeper","_currentVideoIndex","loadCurrentPlaylistVideo","newState","YTPlayerOpts","playerVars","autoplay","controls","fs","rel","modestbranding","containerClassName","opts","onPlay","onPlayerStart","onEnd","loadNextPlaylistVideo","REACT_APP_YT_API_KEY","process","App","LoadingText","_playlistRetriever","window","location","get","search","onMount","GetPlaylistVideoIds","console","log","newHref","navigator","clipboard","writeText","alert","onConfigFormSubmit","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,8C,0OCGtBC,E,WAMjB,WAAYC,GAAiB,yBALrBC,aAKoB,EACxBC,KAAKD,QAAUD,E,uGAOYG,G,6EACvBC,EAAwB,GACxBC,EAAQ,G,uBAGSH,KAAKI,sBAAsBH,EAAYE,G,YAApDE,E,QACKC,M,sBACC,IAAIC,MAAMF,EAAKC,MAAME,S,OAE/BN,EAAKO,KAAL,MAAAP,EAAI,YAASG,EAAKK,QAClBP,EAAK,UAAGE,EAAKM,qBAAR,QAAyB,G,UACf,KAAVR,E,iDAEFD,G,2LAOsBD,G,uFACZD,KAAKY,kBAAkBX,G,cAApCC,E,yBACGA,EAAKW,KAAI,SAAAC,GAAK,mCAAIA,EAAMC,sBAAV,aAAI,EAAsBC,eAA1B,QAAqC,MACrDC,QAAO,SAAAC,GAAE,MAAW,KAAPA,M,4LAQcjB,EAAoBkB,G,kFAChDC,EAAM,IAAIC,IAAI,wDACdC,aAAaC,OAAO,OAAQ,kBAChCH,EAAIE,aAAaC,OAAO,aAActB,GACtCmB,EAAIE,aAAaC,OAAO,MAAOvB,KAAKD,SACpCqB,EAAIE,aAAaC,OAAO,aAAc,MAClCJ,GAAWC,EAAIE,aAAaC,OAAO,YAAaJ,G,SAE/BK,MAAMJ,EAAIK,KAAM,CACjCC,QAAS,CACL,OAAU,sB,cAFdC,E,iBAK4CA,EAASC,O,eAArDC,E,yBAEGA,G,iHCzDR,SAASC,EAAmBC,GAK/B,IAJA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OACrBC,EAAa,YAAOL,GAGjB,IAAMG,GAGXD,EAAcI,KAAKC,MAAMD,KAAKE,SAAWL,GAIzCF,EAAiBI,EAHjBF,GAAgB,GAIhBE,EAAcF,GAAgBE,EAAcH,GAC5CG,EAAcH,GAAeD,EAG/B,OAAOI,EAGJ,SAAeI,EAAtB,oC,4CAAO,WAAiCvC,EAAoBwC,GAArD,qCAAAC,EAAA,6DAAuEC,EAAvE,gCACDvB,EAAM,IAAIC,IAAI,mDACduB,EAAQ,KACRD,IAAgBC,GAAS,YAC7BxB,EAAIE,aAAaC,OAAO,OAAQqB,GAChCxB,EAAIE,aAAaC,OAAO,KAAMtB,GAC9BmB,EAAIE,aAAaC,OAAO,MAAOkB,GAN1B,SAOejB,MAAMJ,EAAIK,KAAM,CAChCC,QAAS,CACL,OAAU,sBATb,cAODmB,EAPC,iBAamCA,EAAQjB,OAb3C,eAaDA,EAbC,OAcDC,EAAWD,EAAKlB,MAAMoC,MAAK,SAAAjB,GAAQ,OAAIA,EAASX,KAAOjB,KAdtD,kBAgBE4B,GAhBF,6C,sEChBckB,E,4MACjBC,MAAQ,G,uDAGJ,OAAKhD,KAAKiD,MAAMpB,UACX7B,KAAKiD,MAAMpB,SAASqB,QAGrB,yBAAKC,MAAO,CAACC,QAAS,OAAQC,SAAU,EAAGC,QAAS,QAChD,6BACI,yBAAKC,IAAKvD,KAAKiD,MAAMpB,SAASqB,QAAQM,WAAWC,QAAQrC,IAAKsC,IAAI,eAEtE,yBAAKP,MAAO,CAACQ,YAAa,QACtB,+BACI,+BACI,4BACI,8CACA,4BAAK3D,KAAKiD,MAAMpB,SAASqB,QAAQU,QAErC,4BACI,4CACA,4BAAK5D,KAAKiD,MAAMpB,SAASqB,QAAQW,eAErC,4BACI,oDACA,4BAAK7D,KAAKiD,MAAMpB,SAASqB,QAAQY,kBArBxB,kBAAC,WAAD,U,GAJWC,aCgB/BC,E,4MAKjBhB,MAAe,G,iGAESiB,G,iFACPzB,EAAkByB,EAAUjE,KAAKiD,MAAMiB,eAAe,G,8KAG7D,IAAD,OACL,OACI,yBAAKf,MAAO,CAAEC,QAAS,OAAQE,QAAS,QACpC,kBAAC,IAAD,CACIa,cAAe,CACXC,cAAe,GACfC,YAAa,iBACbC,gBAAgB,EAChBC,gBAAgB,GAEpBC,SAAQ,uCAAE,WAAMC,GAAN,iBAAA/B,EAAA,yDACAgC,EAAc,GACfD,EAAOL,cAFN,gBAGFM,EAAON,cAAgB,WAHrB,uCAKe,EAAKO,UAAUF,EAAOL,eALrC,QAKE/D,EALF,UAOEqE,EAAON,cAAgB,uBAE3B,EAAKQ,SAAS,CAAEC,gBAAiBxE,IAT/B,iCAYCqE,GAZD,4CAAF,sDAcRI,SAAU,SAACL,EAAD,GAAgC,IAArBM,EAAoB,EAApBA,cACjB,EAAK9B,MAAM6B,SAASL,GACpBM,GAAc,IAElBC,kBAAkB,IAEjB,SAACC,GAAY,IAAD,IACT,OACI,0BAAMH,SAAUG,EAAOC,aAAc/B,MAAO,CAAEgC,YAAa,SAAUC,YAAa,MAAO9B,QAAS,MAAO+B,MAAO,MAAOC,SAAU,UAC7H,kBAACC,EAAA,EAAD,CACIC,MAAM,sBACNC,MAAOR,EAAOR,OAAOL,cACrBsB,SAAUT,EAAOU,aACjBC,OAAQX,EAAOY,WACfC,KAAK,gBACLxF,QAAO2E,EAAOP,OAAON,cACrB2B,WAAU,UAAEd,EAAOP,OAAON,qBAAhB,QAAiC,8BAC3C4B,WAAS,EACTC,SAAUhB,EAAOiB,eAErB,6BACA,6BACA,kBAACX,EAAA,EAAD,CACIC,MAAM,eACNC,MAAOR,EAAOR,OAAOJ,YACrBqB,SAAUT,EAAOU,aACjBC,OAAQX,EAAOY,WACfC,KAAK,cACLxF,QAAO2E,EAAOP,OAAOL,YACrB0B,WAAU,UAAEd,EAAOP,OAAOL,mBAAhB,QAA+B,yDACzC2B,WAAS,EACTC,SAAUhB,EAAOiB,eAErB,6BACA,6BACA,kBAACC,EAAA,EAAD,CACIX,MAAM,wBACNY,QAAS,kBAACC,EAAA,EAAD,CACLC,QAASrB,EAAOR,OAAOH,eACvBoB,SAAUT,EAAOU,aACjBC,OAAQX,EAAOY,WACfC,KAAK,iBACLG,SAAUhB,EAAOiB,iBAGzB,kBAACC,EAAA,EAAD,CACIX,MAAM,2BACNY,QAAS,kBAACC,EAAA,EAAD,CACLC,QAASrB,EAAOR,OAAOF,eACvBmB,SAAUT,EAAOU,aACjBC,OAAQX,EAAOY,WACfC,KAAK,iBACLG,SAAUhB,EAAOiB,iBAIzB,6BACA,6BACA,kBAACK,EAAA,EAAD,CAAQC,KAAK,SAASC,QAAQ,WAAWR,SAAUhB,EAAOiB,cAA1D,mBAOhB,kBAAC,EAAD,CAAwBrE,SAAU7B,KAAKgD,MAAM6B,uB,GApGrBd,aAAnBC,EACV0C,aAAe,CAClB5B,SAAU,c,YC3BG6B,E,WAUjB,aAAsC,IAA1BC,EAAyB,uDAAJ,GAAI,yBAT7BC,cAS6B,OAR7BC,iBAQ6B,OAP7BC,WAO6B,OAN7BC,iBAM6B,EACjChH,KAAKgH,YAAcJ,EACnB5G,KAAK6G,SAAW,IAAII,aACpBjH,KAAK8G,YAAc9G,KAAK6G,SAASK,mBACjClH,KAAK8G,YAAYK,UAAU1B,MAAQ,IACnCzF,KAAK+G,MAAQ/G,KAAK6G,SAASO,aAC3BpH,KAAK8G,YAAYO,QAAQrH,KAAK+G,OAC9B/G,KAAK+G,MAAMM,QAAQrH,KAAK6G,SAASS,aACjCtH,KAAK+G,MAAMQ,KAAK9B,MAAQ,EACxBzF,KAAK8G,YAAYU,MAAM,G,mDAGS,IAAD,OAAvBC,EAAuB,uDAAJ,IAC3BzH,KAAK0H,YACLC,YAAW,WACP,EAAKC,aACLH,K,kCAIJzH,KAAK+G,MAAMQ,KAAK9B,MAAQzF,KAAKgH,c,iCAI7BhH,KAAK+G,MAAMQ,KAAK9B,MAAQ,M,8BCxBXoC,E,4MAMjB7E,MAAQ,G,uDAmBJ,OACI,yBAAKG,MAAK,eAjB4B,CACtCkC,MAAO,OACPyC,OAAQ,QAeE,CAAsB1E,QAASpD,KAAKiD,MAAM8E,OAAS,OAAQ,UACjE,yBAAKxE,IAAKyE,IAAkBtE,IAAI,GAAGP,MAAO,CAACkC,MAAO,UAClD,yBAAKlC,MAd+B,CACxC8E,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,SAAU,QACVC,MAAO,QACPC,UAAW,uBACXC,gBAAiB,QACjBC,UAAW,WAOFxI,KAAKiD,MAAMwF,W,GA7BS1E,aAApB8D,EACVnB,aAAe,CAClBqB,QAAQ,EACRU,KAAM,I,ICEOC,E,kDAcjB,WAAYzF,GAAe,IAAD,8BACtB,cAAMA,IATVD,MAAe,CACX2F,eAAgB,GAChBC,gBAAgB,EAChBC,gBAAgB,GAKM,EAHlBC,aAGkB,IAFlBC,wBAEkB,EAEtB,EAAKD,QAAU,IAAInC,EAAO,IAC1B,EAAKoC,mBAAqB,EAHJ,E,gEAOtB/I,KAAKgJ,6B,sCAILhJ,KAAK4E,SAAS,CACVgE,gBAAgB,EAChBC,gBAAgB,IAEpB7I,KAAK8I,QAAQlB,a,8CAIb5H,KAAK+I,qBACL/I,KAAKgJ,6B,iDAIL,IAAIC,EAAW,CACXL,gBAAgB,EAChBC,gBAAgB,EAChBF,eAAgB,IAEhB3I,KAAK+I,mBAAqB/I,KAAKiD,MAAMpB,SAASM,SAC9C8G,EAASN,eAAiB3I,KAAKiD,MAAMpB,SAAS7B,KAAK+I,oBACnDE,EAASJ,gBAAiB,EAC1B7I,KAAK8I,QAAQpB,aAGjB1H,KAAK4E,SAASqE,K,+BAGR,IAAD,OACL,GAAmC,IAA/BjJ,KAAKiD,MAAMpB,SAASM,OAAc,OAAO,kBAAC,WAAD,MAE7C,IAAM+G,EAAwB,CAC1BpB,OAAQ,OACRzC,MAAO,OACP8D,WAAY,CACRC,SAAU,EACVC,SAAUrJ,KAAKiD,MAAMqB,eAAiB,EAAI,EAC1CgF,GAAI,EACJC,IAAK,EACLC,eAAgB,IAIxB,OACI,yBAAKrG,MAAO,CAAC2E,OAAQ,YACjB,yBAAKC,QAAS/H,KAAKgD,MAAM4F,eAAgBzF,MAAO,CAAC2E,OAAQ,YACrD,kBAAC,IAAD,CACI2B,mBAAmB,oBACnBzI,QAAShB,KAAKgD,MAAM2F,eACpBe,KAAMR,EACNS,OAAQ,kBAAM,EAAKC,iBACnBC,MAAO,kBAAM,EAAKC,4BAG1B,kBAAC,EAAD,CAAa/B,QAAS/H,KAAKgD,MAAM6F,eAAgBJ,KAAMzI,KAAKiD,MAAMoB,mB,GA9EtCN,aAAvB2E,EACVhC,aAAe,CAClB7E,SAAU,GACVwC,YAAa,GACbC,gBAAgB,GCbxB,IAAMyF,EAAoB,OAAGC,oFAAoC,GAiB5CC,E,kDAajB,WAAYhH,GAAe,IAAD,2BACtB,cAAMA,IAbVD,MAAQ,CACJ2F,eAAgB,GAChBC,gBAAgB,EAChBC,gBAAgB,EAChBqB,YAAa,GACbrI,SAAU,GACV5B,WAAY,GACZqE,gBAAgB,EAChBC,gBAAgB,GAIM,EAFlB4F,wBAEkB,EAEtB,EAAKA,mBAAqB,IAAItK,EAAoBkK,GAMlD,IAAI3I,EAAM,IAAIC,IAAI+I,OAAOC,SAAS5I,MARZ,OAStB,EAAKuB,MAAM/C,WAAX,UAAwBmB,EAAIE,aAAagJ,IAAI,eAA7C,QAAwD,GACxD,EAAKtH,MAAMkH,YAAX,UAAyB9I,EAAIE,aAAagJ,IAAI,sBAA9C,QAAgE,GAChE,EAAKtH,MAAMsB,eAA4D,MAA3ClD,EAAIE,aAAagJ,IAAI,kBACjD,EAAKtH,MAAMuB,eAA4D,MAA3CnD,EAAIE,aAAagJ,IAAI,kBAEjDlJ,EAAImJ,OAAS,GAdS,E,gEAkBtBvK,KAAKwK,Y,mJAIAxK,KAAKgD,MAAM/C,W,iEAEKuC,EAAkBxC,KAAKgD,MAAM/C,WAAY8J,G,wCAE1D/J,KAAK4E,SAAS,CAAC3E,WAAY,GAAI4B,SAAU,K,oDAKxB7B,KAAKmK,mBAAmBM,oBAAoBzK,KAAKgD,MAAM/C,Y,QAApEI,E,OACAL,KAAKgD,MAAMuB,iBAAgBlE,EAAOyB,EAAezB,IACrDL,KAAK4E,SAAS,CAAC/C,SAAUxB,I,kDAEzBqK,QAAQpK,MAAR,M,yJAIWmE,GACfiG,QAAQC,IAAIlG,GACZ,IAAIrD,EAAM,IAAIC,IAAI+I,OAAOC,SAAS5I,MAClCL,EAAImJ,OAAS,GACbnJ,EAAIE,aAAaC,OAAO,OAAQkD,EAAOL,eACvChD,EAAIE,aAAaC,OAAO,cAAekD,EAAOJ,aAC9CjD,EAAIE,aAAaC,OAAO,iBAAkBkD,EAAOH,eAAiB,IAAM,KACxElD,EAAIE,aAAaC,OAAO,iBAAkBkD,EAAOF,eAAiB,IAAM,KACxE,IAAIqG,EAAUxJ,EAAIK,KAClBoJ,UAAUC,UAAUC,UAAUH,GAC9BI,MAAM,iFACNZ,OAAOC,SAAS5I,KAAOL,EAAIK,O,+BAGrB,IAAD,OACL,OACI,yBAAK0B,MAAO,CAAC2E,OAAQ,YAChB9H,KAAKgD,MAAMnB,SAASM,OAAS,EACxB,kBAAC,EAAD,CACEN,SAAU7B,KAAKgD,MAAMnB,SACrBwC,YAAarE,KAAKgD,MAAMkH,YACxB5F,eAAgBtE,KAAKgD,MAAMsB,iBAC7B,GACJtE,KAAKgD,MAAM/C,WAEP,GADA,kBAAC,EAAD,CAAYiE,cAAe6F,EAAsBjF,SAAU,SAAAL,GAAM,OAAI,EAAKwG,mBAAmBxG,W,GA5ElFV,aCZbmH,QACW,cAA7Bd,OAAOC,SAASc,UAEe,UAA7Bf,OAAOC,SAASc,UAEhBf,OAAOC,SAASc,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDiItB,kBAAmBZ,WACrBA,UAAUa,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzL,GACLoK,QAAQpK,MAAMA,EAAME,c","file":"static/js/main.35bde56a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SMPTE_Color_Bars.bba5813e.svg\";","import { IPlaylistItem, IPlayListItemListResponse } from \"../Interfaces/YTInterfaces\";\n\n\nexport default class YTPlaylistRetriever {\n    private _apiKey: string;\n    /**\n     * Creates a YTPlaylistRetriever\n     * @param apiKey The youtube v3 api key\n     */\n    constructor(apiKey: string) {\n        this._apiKey = apiKey;\n    }\n\n    /**\n     * Returns a list of youtube videos\n     * @param playlistId The youtube play list id\n     */\n    public async GetPlaylistVideos(playlistId: string): Promise<IPlaylistItem[]> {\n        let list: IPlaylistItem[] = [];\n        let token = '';\n\n        do {\n            let temp = await this._getPlaylistVideoPage(playlistId, token);\n            if (temp.error) {\n                throw new Error(temp.error.message);\n            }\n            list.push(...temp.items);\n            token = temp.nextPageToken ?? \"\";\n        } while (token !== \"\")\n\n        return list;\n    }\n\n    /**\n     * Returns a list of youtube video IDs\n     * @param playlistId The youtube playlist ID\n     */\n    public async GetPlaylistVideoIds(playlistId: string): Promise<string[]> {\n        let list = await this.GetPlaylistVideos(playlistId);\n        return list.map(video => video.contentDetails?.videoId ?? \"\")\n            .filter(id => id !== '');\n    }\n\n    /**\n     * Gets a page of videos from the youtube playlist\n     * @param playlistId The youtube playlist ID\n     * @param pageToken The page token for the next video\n     */\n    private async _getPlaylistVideoPage(playlistId: string, pageToken?: string): Promise<IPlayListItemListResponse> {\n        let url = new URL(\"https://www.googleapis.com/youtube/v3/playlistItems\");\n        url.searchParams.append('part', 'contentDetails');\n        url.searchParams.append('playlistId', playlistId);\n        url.searchParams.append('key', this._apiKey);\n        url.searchParams.append('maxResults', '50');\n        if (pageToken) url.searchParams.append('pageToken', pageToken);\n        \n        let response = await fetch(url.href, {\n            headers: {\n                'Accept': 'application/json',\n            }\n        });\n        let playlist: IPlayListItemListResponse = await response.json();\n\n        return playlist;\n    }\n}","import { IPlaylist, IPlaylistListResponse } from \"../Interfaces/YTInterfaces\";\n\n/**\n * Creates a new array and randomizes the order of the elements\n * @param array Input array\n */\nexport function RandomizeOrder<T> (array: T[]): T[] {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n    let shuffledArray = [...array];\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = shuffledArray[currentIndex];\n      shuffledArray[currentIndex] = shuffledArray[randomIndex];\n      shuffledArray[randomIndex] = temporaryValue;\n    }\n  \n    return shuffledArray;\n}\n\nexport async function GetPlaylistObject(playlistId: string, YTApiKey: string, includeSnippet: boolean = false): Promise<IPlaylist | undefined> {\n  let url = new URL('https://www.googleapis.com/youtube/v3/playlists');\n  let parts = 'id'\n  if (includeSnippet) parts += ',snippet';\n  url.searchParams.append('part', parts);\n  url.searchParams.append('id', playlistId);\n  url.searchParams.append('key', YTApiKey);\n  let request = await fetch(url.href, {\n      headers: {\n          \"Accept\": \"application/json\"\n      }\n  })\n\n  let json: IPlaylistListResponse = await request.json();\n  let playlist = json.items.find(playlist => playlist.id === playlistId)\n\n  return playlist;\n}","import React, { Component, Fragment } from 'react'\nimport { IPlaylist } from '../Interfaces/YTInterfaces'\n\ninterface Props {\n    playlist?: IPlaylist\n}\ninterface State {\n    \n}\n\nexport default class YoutubePlaylistSnippet extends Component<Props, State> {\n    state = {}\n\n    render() {\n        if (!this.props.playlist) return <Fragment />;\n        if (!this.props.playlist.snippet) return <Fragment />;\n\n        return (\n            <div style={{display: \"flex\", flexGrow: 1, padding: '1em'}}>\n                <div>\n                    <img src={this.props.playlist.snippet.thumbnails.default.url} alt='thumbnail'/>\n                </div>\n                <div style={{paddingLeft: '1em'}}>\n                    <table >\n                        <tbody>\n                            <tr>\n                                <th>Playlist Title</th>\n                                <td>{this.props.playlist.snippet.title}</td>\n                            </tr>\n                            <tr>\n                                <th>Channel Name</th>\n                                <td>{this.props.playlist.snippet.channelTitle}</td>\n                            </tr>\n                            <tr>\n                                <th>Playlist Description</th>\n                                <td>{this.props.playlist.snippet.description}</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react'\nimport { Formik } from 'formik';\nimport { IPlaylist } from '../Interfaces/YTInterfaces'\nimport { Button, Checkbox, FormControlLabel, TextField } from '@material-ui/core';\nimport YoutubePlaylistSnippet from './YoutubePlaylistSnippet';\nimport { GetPlaylistObject } from '../Utilities/Utilities';\n\ninterface Props {\n    YoutubeApiKey: string,\n    onSubmit: IOnSubmit\n}\ninterface State {\n    currentPlaylist?: IPlaylist;\n}\n\ninterface IOnSubmit {\n    (values: onSubmitParameters): void\n}\n\nexport interface onSubmitParameters {\n    youtubeListId: string,\n    loadingText: string,\n    showYTControls: boolean,\n    randomizeOrder: boolean\n}\n\nexport default class ConfigForm extends Component<Props, State> {\n    static defaultProps = {\n        onSubmit: () => { }\n    }\n\n    state: State = {}\n\n    private async getYTList(YTListId: string): Promise<IPlaylist | undefined> {\n        return await GetPlaylistObject(YTListId, this.props.YoutubeApiKey, true);\n    }\n\n    render() {\n        return (\n            <div style={{ display: \"flex\", padding: '1em' }}>\n                <Formik\n                    initialValues={{\n                        youtubeListId: '',\n                        loadingText: 'BE RIGHT BACK!',\n                        showYTControls: false,\n                        randomizeOrder: true\n                    }}\n                    validate={async values => {\n                        const errors: any = {};\n                        if (!values.youtubeListId) {\n                            errors.youtubeListId = 'Required';\n                        } else {\n                            let temp = await this.getYTList(values.youtubeListId);\n                            if (!temp) {\n                                errors.youtubeListId = 'Invalid playlist ID'\n                            }\n                            this.setState({ currentPlaylist: temp });\n                        }\n\n                        return errors;\n                    }}\n                    onSubmit={(values, { setSubmitting }) => {\n                        this.props.onSubmit(values);\n                        setSubmitting(false);\n                    }}\n                    validateOnChange={false}\n                >\n                    {(formik) => {\n                        return (\n                            <form onSubmit={formik.handleSubmit} style={{ borderStyle: 'groove', borderWidth: '5px', padding: '1em', width: '25%', minWidth: '500px' }}>\n                                <TextField\n                                    label='Youtube Playlist ID'\n                                    value={formik.values.youtubeListId}\n                                    onChange={formik.handleChange}\n                                    onBlur={formik.handleBlur}\n                                    name='youtubeListId'\n                                    error={formik.errors.youtubeListId ? true : false}\n                                    helperText={formik.errors.youtubeListId ?? 'Enter a youtube playlist ID'}\n                                    fullWidth\n                                    disabled={formik.isSubmitting}\n                                />\n                                <br />\n                                <br />\n                                <TextField\n                                    label='Loading Text'\n                                    value={formik.values.loadingText}\n                                    onChange={formik.handleChange}\n                                    onBlur={formik.handleBlur}\n                                    name='loadingText'\n                                    error={formik.errors.loadingText ? true : false}\n                                    helperText={formik.errors.loadingText ?? 'Displayed while loading the next video in the playlist'}\n                                    fullWidth\n                                    disabled={formik.isSubmitting}\n                                />\n                                <br />\n                                <br />\n                                <FormControlLabel \n                                    label=\"Show Youtube Controls\"\n                                    control={<Checkbox \n                                        checked={formik.values.showYTControls}\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        name=\"showYTControls\"\n                                        disabled={formik.isSubmitting}\n                                    />}\n                                />\n                                <FormControlLabel \n                                    label=\"Randomize playlist order\"\n                                    control={<Checkbox \n                                        checked={formik.values.randomizeOrder}\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        name=\"randomizeOrder\"\n                                        disabled={formik.isSubmitting}\n                                    />}\n                                />\n                                \n                                <br />\n                                <br />\n                                <Button type='submit' variant='outlined' disabled={formik.isSubmitting}>\n                                    Create Link\n                                </Button>\n                            </form>\n                        )\n                    }}\n                </Formik>\n                <YoutubePlaylistSnippet playlist={this.state.currentPlaylist} />\n            </div>\n        )\n    }\n}\n","\nexport default class Beeper {\n    private _context: AudioContext\n    private _oscillator: OscillatorNode\n    private _gain: GainNode\n    private _beepVolume: number;\n\n    /**\n     * \n     * @param beepVolume A value from 0 - 1. Sets the volume of the beep. By default, this is .1.\n     */\n    constructor(beepVolume: number = .1) {\n        this._beepVolume = beepVolume;\n        this._context = new AudioContext();\n        this._oscillator = this._context.createOscillator();\n        this._oscillator.frequency.value = 1000;\n        this._gain = this._context.createGain();\n        this._oscillator.connect(this._gain);\n        this._gain.connect(this._context.destination);\n        this._gain.gain.value = 0;\n        this._oscillator.start(0);\n    }\n\n    public Beep(duration: number = 500){\n        this.StartBeep()\n        setTimeout(() => {\n            this.StopBeep();\n        }, (duration));\n    }\n\n    public StartBeep() {\n        this._gain.gain.value = this._beepVolume; // Sets the volume of the beep\n    }\n\n    public StopBeep() {\n        this._gain.gain.value = 0;\n    }\n}","import React, { Component } from 'react'\nimport TestPatternImage from './SMPTE_Color_Bars.svg'\n\ninterface Props {\n    hidden: boolean,\n    text: string,\n}\ninterface State {\n    \n}\n\nexport default class TestPattern extends Component<Props, State> {\n    static defaultProps = {\n        hidden: false,\n        text: \"\"\n    }\n    \n    state = {}\n\n    render() {\n        let containerStyle: React.CSSProperties = {\n            width: '100%',\n            height: '100%',\n        }\n\n        let overlayTextStyle: React.CSSProperties = {\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            fontSize: '150px',\n            color: \"white\",\n            transform: 'translate(-50%,-50%)',\n            backgroundColor: \"black\",\n            textAlign: 'center'\n        }\n\n        return (\n            <div style={{...containerStyle, display: this.props.hidden ? \"none\": \"flex\"}}>\n                <img src={TestPatternImage} alt=\"\" style={{width: '100%'}} />\n                <div style={overlayTextStyle}>\n                    {this.props.text}\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component, Fragment } from 'react'\nimport YTPlayer, { Options } from 'react-youtube';\nimport Beeper from '../Controller/Beeper';\nimport TestPattern from './TestPattern'\n\ninterface Props {\n    playlist: string[];\n    loadingText: string;\n    showYTControls: boolean;\n}\ninterface State {\n    currentVideoId: string;\n    IsVideoPlaying: boolean;\n    IsLoadingVideo: boolean;\n}\n\nexport default class PlaylistPlayer extends Component<Props, State> {\n    static defaultProps = {\n        playlist: [],\n        loadingText: '',\n        showYTControls: false\n    }\n    state: State = {\n        currentVideoId: '',\n        IsVideoPlaying: false,\n        IsLoadingVideo: true\n    }\n    private _beeper: Beeper;\n    private _currentVideoIndex: number;\n\n    constructor(props: Props) {\n        super(props);\n        this._beeper = new Beeper(.1);\n        this._currentVideoIndex = 0;\n    }\n\n    componentDidMount() {\n        this.loadCurrentPlaylistVideo();\n    }\n\n    onPlayerStart() {\n        this.setState({\n            IsVideoPlaying: true,\n            IsLoadingVideo: false\n        });\n        this._beeper.StopBeep();\n    }\n\n    loadNextPlaylistVideo() {\n        this._currentVideoIndex++;\n        this.loadCurrentPlaylistVideo();\n    }\n\n    loadCurrentPlaylistVideo() {\n        let newState = {\n            IsVideoPlaying: false,\n            IsLoadingVideo: false,\n            currentVideoId: ''\n        }\n        if (this._currentVideoIndex < this.props.playlist.length) {\n            newState.currentVideoId = this.props.playlist[this._currentVideoIndex];\n            newState.IsLoadingVideo = true;\n            this._beeper.StartBeep();\n        }\n\n        this.setState(newState);\n    }\n\n    render() {\n        if (this.props.playlist.length === 0) return <Fragment />\n\n        const YTPlayerOpts: Options = {\n            height: '100%',\n            width: '100%',\n            playerVars: {\n                autoplay: 1,\n                controls: this.props.showYTControls ? 1 : 0, // Hide the player controls\n                fs: 0, // Hide the fullscreen button\n                rel: 0, // Disable showing related videos after a video is finished playing\n                modestbranding: 1\n            }\n        }\n\n        return (\n            <div style={{height: 'inherit'}}>\n                <div hidden={!this.state.IsVideoPlaying} style={{height: 'inherit'}}>\n                    <YTPlayer\n                        containerClassName='YTPlayerContainer'\n                        videoId={this.state.currentVideoId}\n                        opts={YTPlayerOpts}\n                        onPlay={() => this.onPlayerStart()}\n                        onEnd={() => this.loadNextPlaylistVideo()}\n                    />\n                </div>\n                <TestPattern hidden={!this.state.IsLoadingVideo} text={this.props.loadingText}/>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './App.css';\nimport YTPlaylistRetriever from './Controller/PlaylistRetriever';\nimport { GetPlaylistObject, RandomizeOrder } from './Utilities/Utilities';\nimport ConfigForm, { onSubmitParameters } from './Components/ConfigForm';\nimport PlaylistPlayer from './Components/PlaylistPlayer';\n\nconst REACT_APP_YT_API_KEY = process.env.REACT_APP_YT_API_KEY ?? '';\n\n\ninterface Props {\n    \n}\ninterface State {\n    currentVideoId: string;\n    IsVideoPlaying: boolean;\n    IsLoadingVideo: boolean;\n    LoadingText: string;\n    playlist: string[];\n    playlistId: string;\n    showYTControls: boolean;\n    randomizeOrder: boolean;\n}\n\nexport default class App extends Component<Props, State> {\n    state = {\n        currentVideoId: '',\n        IsVideoPlaying: false,\n        IsLoadingVideo: true,\n        LoadingText: '',\n        playlist: [],\n        playlistId: '',\n        showYTControls: false,\n        randomizeOrder: true\n    }\n    private _playlistRetriever: YTPlaylistRetriever;\n\n    constructor(props: Props) {\n        super(props);\n        this._playlistRetriever = new YTPlaylistRetriever(REACT_APP_YT_API_KEY);\n\n        // Use PL4o29bINVT4EG_y-k5jGoOu3-Am8Nvi10 for a super super long list\n        // Use PLWXWbr9ex3iVqtmHSJ0OIeEnD2hOZnp2Q for xenoblade chronicles music\n        // Use PLxV_ER5SmeVYYSKfzplwqoQzmYWMEidIV for a super short list\n        // Use PLaetSIDm3F73cpqVlmsQgrpX3GV_NwU1T for a sample montage list \n        let url = new URL(window.location.href);\n        this.state.playlistId = url.searchParams.get('list') ?? '';\n        this.state.LoadingText = url.searchParams.get('loadingText') ?? '';\n        this.state.showYTControls = url.searchParams.get('showYTControls') === '1' ? true : false;\n        this.state.randomizeOrder = url.searchParams.get('randomizeOrder') === '1' ? true : false; \n\n        url.search = '';\n    }\n\n    componentDidMount() {\n        this.onMount();\n    }\n\n    async onMount() {\n        if (!this.state.playlistId) return;\n        \n        let playlist = await GetPlaylistObject(this.state.playlistId, REACT_APP_YT_API_KEY);\n        if (!playlist) {\n            this.setState({playlistId: '', playlist: []});\n            return;\n        }\n\n        try {\n            let temp = await this._playlistRetriever.GetPlaylistVideoIds(this.state.playlistId);\n            if (this.state.randomizeOrder) temp = RandomizeOrder(temp);\n            this.setState({playlist: temp});\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    onConfigFormSubmit(values: onSubmitParameters) {\n        console.log(values);\n        let url = new URL(window.location.href);\n        url.search = ''; // Get rid of all query parameters\n        url.searchParams.append('list', values.youtubeListId);\n        url.searchParams.append('loadingText', values.loadingText);\n        url.searchParams.append('showYTControls', values.showYTControls ? '1' : '0');\n        url.searchParams.append('randomizeOrder', values.randomizeOrder ? '1' : '0');\n        let newHref = url.href\n        navigator.clipboard.writeText(newHref);\n        alert(`The link has been copied to your clipboard. Redirecting you to your new page.`);\n        window.location.href = url.href;\n    }\n\n    render() {\n        return (\n            <div style={{height: 'inherit'}}>\n                {this.state.playlist.length > 0 \n                    ? <PlaylistPlayer \n                        playlist={this.state.playlist} \n                        loadingText={this.state.LoadingText}\n                        showYTControls={this.state.showYTControls} /> \n                    : '' }\n                {!this.state.playlistId\n                    ? <ConfigForm YoutubeApiKey={REACT_APP_YT_API_KEY} onSubmit={values => this.onConfigFormSubmit(values)} />\n                    : ''}\n            </div>\n        );\n    } \n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}